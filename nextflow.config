//Load base config
includeConfig 'config/base.config'

params{

    //show help message
    help=false

    //input sample sheet
    samplesheet = "samplesheet.csv"
    
    //default output
    output= "$projectDir/output"

    //databases
    gunc_db = "$projectDir/db/guncDB"
    //confindr_db = "$projectDir/db/confindr_db"
    
    //adapters for qc trimming
    adapter_file="$projectDir/data/adapters.fas"
    
    
    //assembly parameters
    min_contig_length = 500
    //assembler_thread = 8
    //assembler_ram = 16
    medaka_model = "r941_e81_fast_g514"

    //temporal genus name
    //genusNAME = "Acinetobacter baumannii"
   
   //input json_file
   json_file= "Escherichia_coli.json"
}


profiles {
    standard {
        docker.runOptions='-u $(id -u):$(id -g) --platform=linux/amd64'
        docker.enabled = true

        process {
            executor = 'local'
            withLabel: bash_container {
                container = 'varunshamanna/bash_ghru'
            }
            withLabel: python_container {
                container = 'python'
            }
            withLabel: kmc_container{
                container = 'varunshamanna/kmc_ghru'
            }
            withLabel: trimmomatic_container{
                container = 'quay.io/biocontainers/trimmomatic:0.36--3'
            }
            withLabel: fastqc_container{
                container = 'quay.io/biocontainers/fastqc:0.12.1--hdfd78af_0'
            }
            withLabel: shovill_container{
                container = 'staphb/shovill:1.1.0-2022Dec'
            }
            withLabel: quast_container{
                container = 'quay.io/biocontainers/quast:5.2.0--py312pl5321hc60241a_4'
            }
            withLabel: dragonflye_container{
                //container = 'staphb/dragonflye:1.2.1'
                container =  'pranit10/cgps:dragonflye_medaka'
            }
            withLabel: 'nanoplot_container'{
                container = 'quay.io/biocontainers/nanoplot:1.42.0--pyhdfd78af_0'
            }
            withLabel: 'porechop_container'{
                container = 'quay.io/biocontainers/porechop:0.2.4--py310h84f13bb_8'
            }
            withLabel: 'unicycler_container'{
                container = 'quay.io/biocontainers/unicycler:0.5.0--py39heaaa4ec_5'
            }
            withLabel: 'checkm_container'{
                container = 'quay.io/biocontainers/checkm-genome:1.2.3--pyhdfd78af_0'
            }
            withLabel: 'gunc_container'{
                container = 'quay.io/biocontainers/gunc:1.0.6--pyhdfd78af_0'
            }
            withLabel: 'speciation_container'{
                container = 'juliofdiaz/speciator:4.0.0'
            }

        }  
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
